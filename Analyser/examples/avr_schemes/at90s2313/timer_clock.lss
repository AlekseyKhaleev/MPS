
timer_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  0000020e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005b  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000122  00000000  00000000  00000289  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000009a  00000000  00000000  000003ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000022d  00000000  00000000  00000445  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000094  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000033  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	95 c0       	rjmp	.+298    	; 0x136 <__vector_5>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <dr+0x10>
  18:	2d c0       	rjmp	.+90     	; 0x74 <dr+0x14>
  1a:	2e c0       	rjmp	.+92     	; 0x78 <dr+0x18>
  1c:	2f c0       	rjmp	.+94     	; 0x7c <dr+0x1c>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <dr+0x20>
  20:	31 c0       	rjmp	.+98     	; 0x84 <dr+0x24>
  22:	32 c0       	rjmp	.+100    	; 0x88 <dr+0x28>
  24:	33 c0       	rjmp	.+102    	; 0x8c <dr+0x2c>
  26:	34 c0       	rjmp	.+104    	; 0x90 <dr+0x30>
  28:	36 c0       	rjmp	.+108    	; 0x96 <dr+0x36>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e9       	ldi	r30, 0x9A	; 154
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	03 c0       	rjmp	.+6      	; 0x44 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	c8 95       	lpm
  40:	31 96       	adiw	r30, 0x01	; 1
  42:	0d 92       	st	X+, r0

00000044 <.do_copy_data_start>:
  44:	a0 36       	cpi	r26, 0x60	; 96
  46:	b1 07       	cpc	r27, r17
  48:	d1 f7       	brne	.-12     	; 0x3e <.do_copy_data_loop>

0000004a <__do_clear_bss>:
  4a:	10 e0       	ldi	r17, 0x00	; 0
  4c:	a0 e6       	ldi	r26, 0x60	; 96
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a6 36       	cpi	r26, 0x66	; 102
  56:	b1 07       	cpc	r27, r17
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	20 d0       	rcall	.+64     	; 0x9c <main>
  5c:	9c c0       	rjmp	.+312    	; 0x196 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <dr>:
}

// Декодирование и вывод на индикатор
void dr(uint8_t value)
{
	switch(value)
  60:	e8 2f       	mov	r30, r24
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	ea 30       	cpi	r30, 0x0A	; 10
  66:	f1 05       	cpc	r31, r1
  68:	c0 f4       	brcc	.+48     	; 0x9a <dr+0x3a>
  6a:	e5 5f       	subi	r30, 0xF5	; 245
  6c:	ff 4f       	sbci	r31, 0xFF	; 255
  6e:	09 94       	ijmp
	{
		case 0:
			PORTD = 0x3f;
  70:	8f e3       	ldi	r24, 0x3F	; 63
  72:	0f c0       	rjmp	.+30     	; 0x92 <dr+0x32>
			break;
		case 1:
			PORTD = 0x06;
  74:	86 e0       	ldi	r24, 0x06	; 6
  76:	0d c0       	rjmp	.+26     	; 0x92 <dr+0x32>
			break;
		case 2:
			PORTD = 0x5b;
  78:	8b e5       	ldi	r24, 0x5B	; 91
  7a:	0b c0       	rjmp	.+22     	; 0x92 <dr+0x32>
			break;
		case 3:
			PORTD = 0x4f;
  7c:	8f e4       	ldi	r24, 0x4F	; 79
  7e:	09 c0       	rjmp	.+18     	; 0x92 <dr+0x32>
			break;
		case 4:
			PORTD = 0x66;
  80:	86 e6       	ldi	r24, 0x66	; 102
  82:	07 c0       	rjmp	.+14     	; 0x92 <dr+0x32>
			break;
		case 5:
			PORTD = 0x6d;
  84:	8d e6       	ldi	r24, 0x6D	; 109
  86:	05 c0       	rjmp	.+10     	; 0x92 <dr+0x32>
			break;
		case 6:
			PORTD = 0x7d;
  88:	8d e7       	ldi	r24, 0x7D	; 125
  8a:	03 c0       	rjmp	.+6      	; 0x92 <dr+0x32>
			break;
		case 7:
			PORTD = 0x07;
  8c:	87 e0       	ldi	r24, 0x07	; 7
  8e:	01 c0       	rjmp	.+2      	; 0x92 <dr+0x32>
			break;
		case 8:
			PORTD = 0x7f;
  90:	8f e7       	ldi	r24, 0x7F	; 127
  92:	82 bb       	out	0x12, r24	; 18
  94:	08 95       	ret
			break;
		case 9:
			PORTD = 0x6f;
  96:	8f e6       	ldi	r24, 0x6F	; 111
  98:	82 bb       	out	0x12, r24	; 18
  9a:	08 95       	ret

0000009c <main>:
	TCNT1 = 0x0000;
}

// Основная функция
int main(void)
{
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
	// Настройка указателя стека
	SPL = RAMEND&0xff;
  a6:	8f ed       	ldi	r24, 0xDF	; 223
  a8:	8d bf       	out	0x3d, r24	; 61
	//SPH = (RAMEND>>8);
	
	// Настройка портов
	DDRB = 0xff;
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	97 bb       	out	0x17, r25	; 23
	PORTB = 0x01;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	88 bb       	out	0x18, r24	; 24
	DDRD = 0xff;
  b2:	91 bb       	out	0x11, r25	; 17
	PORTD = 0x00;
  b4:	12 ba       	out	0x12, r1	; 18
	//dr(5);
	
	// Настройка таймера
	TCNT0 = 0x0000;
  b6:	12 be       	out	0x32, r1	; 50
	TCCR1B = 0x02;
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 0x80;
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	89 bf       	out	0x39, r24	; 57
				PORTB = 0x10;	// Смена индикатора
				dr(4);			// Декодирование и вывод
				break;
			case 0x10:
				PORTD = 0x00;	// Очистка данных
				PORTB = 0x20;	// Смена индикатора
  c0:	90 e2       	ldi	r25, 0x20	; 32
  c2:	d9 2e       	mov	r13, r25
				dr(5);			// Декодирование и вывод
				break;
			case 0x20:
				PORTD = 0x00;	// Очистка данных
				PORTB = 0x01;	// Смена индикатора
  c4:	ee 24       	eor	r14, r14
  c6:	e3 94       	inc	r14
				PORTB = 0x08;	// Смена индикатора
				dr(3);			// Декодирование и вывод
				break;
			case 0x08:
				PORTD = 0x00;	// Очистка данных
				PORTB = 0x10;	// Смена индикатора
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	f8 2e       	mov	r15, r24
	{
		switch(PORTB&0x3f)
		{
			case 0x01:
				PORTD = 0x00;	// Очистка данных
				PORTB = 0x02;	// Смена индикатора
  cc:	02 e0       	ldi	r16, 0x02	; 2
				PORTB = 0x04;	// Смена индикатора
				dr(2);			// Декодирование и вывод
				break;
			case 0x04:
				PORTD = 0x00;	// Очистка данных
				PORTB = 0x08;	// Смена индикатора
  ce:	18 e0       	ldi	r17, 0x08	; 8
	//sei();
	
	// Основной цикл (циферблат со стрелками)
	while(1)
	{
		switch(PORTB&0x3f)
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	8f 73       	andi	r24, 0x3F	; 63
  d6:	90 70       	andi	r25, 0x00	; 0
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	91 05       	cpc	r25, r1
  dc:	d9 f0       	breq	.+54     	; 0x114 <__stack+0x35>
  de:	85 30       	cpi	r24, 0x05	; 5
  e0:	91 05       	cpc	r25, r1
  e2:	34 f4       	brge	.+12     	; 0xf0 <__stack+0x11>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	61 f0       	breq	.+24     	; 0x102 <__stack+0x23>
  ea:	02 97       	sbiw	r24, 0x02	; 2
  ec:	89 f7       	brne	.-30     	; 0xd0 <main+0x34>
  ee:	0d c0       	rjmp	.+26     	; 0x10a <__stack+0x2b>
  f0:	80 31       	cpi	r24, 0x10	; 16
  f2:	91 05       	cpc	r25, r1
  f4:	b9 f0       	breq	.+46     	; 0x124 <__stack+0x45>
  f6:	80 32       	cpi	r24, 0x20	; 32
  f8:	91 05       	cpc	r25, r1
  fa:	c1 f0       	breq	.+48     	; 0x12c <__stack+0x4d>
  fc:	08 97       	sbiw	r24, 0x08	; 8
  fe:	41 f7       	brne	.-48     	; 0xd0 <main+0x34>
 100:	0d c0       	rjmp	.+26     	; 0x11c <__stack+0x3d>
		{
			case 0x01:
				PORTD = 0x00;	// Очистка данных
 102:	12 ba       	out	0x12, r1	; 18
				PORTB = 0x02;	// Смена индикатора
 104:	08 bb       	out	0x18, r16	; 24
				dr(1);			// Декодирование и вывод
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	14 c0       	rjmp	.+40     	; 0x132 <__stack+0x53>
				break;
			case 0x02:
				PORTD = 0x00;	// Очистка данных
 10a:	12 ba       	out	0x12, r1	; 18
				PORTB = 0x04;	// Смена индикатора
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	88 bb       	out	0x18, r24	; 24
				dr(2);			// Декодирование и вывод
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0f c0       	rjmp	.+30     	; 0x132 <__stack+0x53>
				break;
			case 0x04:
				PORTD = 0x00;	// Очистка данных
 114:	12 ba       	out	0x12, r1	; 18
				PORTB = 0x08;	// Смена индикатора
 116:	18 bb       	out	0x18, r17	; 24
				dr(3);			// Декодирование и вывод
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0b c0       	rjmp	.+22     	; 0x132 <__stack+0x53>
				break;
			case 0x08:
				PORTD = 0x00;	// Очистка данных
 11c:	12 ba       	out	0x12, r1	; 18
				PORTB = 0x10;	// Смена индикатора
 11e:	f8 ba       	out	0x18, r15	; 24
				dr(4);			// Декодирование и вывод
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	07 c0       	rjmp	.+14     	; 0x132 <__stack+0x53>
				break;
			case 0x10:
				PORTD = 0x00;	// Очистка данных
 124:	12 ba       	out	0x12, r1	; 18
				PORTB = 0x20;	// Смена индикатора
 126:	d8 ba       	out	0x18, r13	; 24
				dr(5);			// Декодирование и вывод
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	03 c0       	rjmp	.+6      	; 0x132 <__stack+0x53>
				break;
			case 0x20:
				PORTD = 0x00;	// Очистка данных
 12c:	12 ba       	out	0x12, r1	; 18
				PORTB = 0x01;	// Смена индикатора
 12e:	e8 ba       	out	0x18, r14	; 24
				dr(0);			// Декодирование и вывод
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	96 df       	rcall	.-212    	; 0x60 <dr>
 134:	cd cf       	rjmp	.-102    	; 0xd0 <main+0x34>

00000136 <__vector_5>:
// Прототипы функций
void dr(uint8_t value);

// Обработчик прерывания по переполнению таймера (часовая пружина или маятник)
ISR(TIMER1_OVF1_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	// Счёт времени
	if ((++sl) >= 10)
 158:	80 91 65 00 	lds	r24, 0x0065
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 65 00 	sts	0x0065, r24
 162:	8a 30       	cpi	r24, 0x0A	; 10
 164:	10 f0       	brcs	.+4      	; 0x16a <__vector_5+0x34>
	{
		sl=0;
 166:	10 92 65 00 	sts	0x0065, r1
					}
				}
			}
		}*/
	}
	dr(sl);
 16a:	80 91 65 00 	lds	r24, 0x0065
 16e:	78 df       	rcall	.-272    	; 0x60 <dr>
	// Корректировка таймера
	TCNT1 = 0x0000;
 170:	1d bc       	out	0x2d, r1	; 45
 172:	1c bc       	out	0x2c, r1	; 44
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
